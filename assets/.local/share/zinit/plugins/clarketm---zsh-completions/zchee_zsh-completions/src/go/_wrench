#compdef wrench

# -----------------------------------------------------------------------------
#
# The BSD-3-Clause License
#
# Copyright (c) 2020, The zsh-completions Authors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of que nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# -----------------------------------------------------------------------------
#
# github.com/cloudspannerecosystem/wrench
#
# -----------------------------------------------------------------------------
#
# Usage:
#   wrench [command]
#
# Available Commands:
#   create      Create database with tables described in schema file
#   drop        Drop database
#   reset       Equivalent to drop and then create
#   load        Load schema from server to file
#   apply       Apply DDL file to database
#   migrate     Migrate database
#   truncate    Truncate all tables without deleting a database
#   help        Help about any command
#
# Flags:
#       --credentials_file string   Specify Credentials File
#       --database string           Cloud Spanner database name (optional. if not set, will use $SPANNER_DATABASE_ID value)
#       --directory string          Directory that schema file placed (required)
#   -h, --help                      help for wrench
#       --instance string           Cloud Spanner instance name (optional. if not set, will use $SPANNER_INSTANCE_ID value) (default "merpay-deferred-pay-jp-dev")
#       --project string            GCP project id (optional. if not set, will use $SPANNER_PROJECT_ID or $GOOGLE_CLOUD_PROJECT value)
#       --schema_file string        Name of schema file (optional. if not set, will use default 'schema.sql' file name)
#       --version                   version for wrench
#
# Use "wrench [command] --help" for more information about a command.
#
# -----------------------------------------------------------------------------
#
# Create database with tables described in schema file
#
# Usage:
#   wrench create [flags]
#
# Flags:
#   -h, --help   help for create
#
# Global Flags:
#       --credentials_file string   Specify Credentials File
#       --database string           Cloud Spanner database name (optional. if not set, will use $SPANNER_DATABASE_ID value)
#       --directory string          Directory that schema file placed (required)
#       --instance string           Cloud Spanner instance name (optional. if not set, will use $SPANNER_INSTANCE_ID value) (default "merpay-deferred-pay-jp-dev")
#       --project string            GCP project id (optional. if not set, will use $SPANNER_PROJECT_ID or $GOOGLE_CLOUD_PROJECT value)
#       --schema_file string        Name of schema file (optional. if not set, will use default 'schema.sql' file name)
#
# -----------------------------------------------------------------------------
#
# Drop database
#
# Usage:
#   wrench drop [flags]
#
# Flags:
#   -h, --help   help for drop
#
# Global Flags:
#       --credentials_file string   Specify Credentials File
#       --database string           Cloud Spanner database name (optional. if not set, will use $SPANNER_DATABASE_ID value)
#       --directory string          Directory that schema file placed (required)
#       --instance string           Cloud Spanner instance name (optional. if not set, will use $SPANNER_INSTANCE_ID value) (default "merpay-deferred-pay-jp-dev")
#       --project string            GCP project id (optional. if not set, will use $SPANNER_PROJECT_ID or $GOOGLE_CLOUD_PROJECT value)
#       --schema_file string        Name of schema file (optional. if not set, will use default 'schema.sql' file name)
#
# -----------------------------------------------------------------------------
#
# Equivalent to drop and then create
#
# Usage:
#   wrench reset [flags]
#
# Flags:
#   -h, --help   help for reset
#
# Global Flags:
#       --credentials_file string   Specify Credentials File
#       --database string           Cloud Spanner database name (optional. if not set, will use $SPANNER_DATABASE_ID value)
#       --directory string          Directory that schema file placed (required)
#       --instance string           Cloud Spanner instance name (optional. if not set, will use $SPANNER_INSTANCE_ID value) (default "merpay-deferred-pay-jp-dev")
#       --project string            GCP project id (optional. if not set, will use $SPANNER_PROJECT_ID or $GOOGLE_CLOUD_PROJECT value)
#       --schema_file string        Name of schema file (optional. if not set, will use default 'schema.sql' file name)
#
# -----------------------------------------------------------------------------
#
# Load schema from server to file
#
# Usage:
#   wrench load [flags]
#
# Flags:
#   -h, --help   help for load
#
# Global Flags:
#       --credentials_file string   Specify Credentials File
#       --database string           Cloud Spanner database name (optional. if not set, will use $SPANNER_DATABASE_ID value)
#       --directory string          Directory that schema file placed (required)
#       --instance string           Cloud Spanner instance name (optional. if not set, will use $SPANNER_INSTANCE_ID value) (default "merpay-deferred-pay-jp-dev")
#       --project string            GCP project id (optional. if not set, will use $SPANNER_PROJECT_ID or $GOOGLE_CLOUD_PROJECT value)
#       --schema_file string        Name of schema file (optional. if not set, will use default 'schema.sql' file name)
#
# -----------------------------------------------------------------------------
#
# Apply DDL file to database
#
# Usage:
#   wrench apply [flags]
#
# Flags:
#       --ddl string    DDL file to be applied
#       --dml string    DML file to be applied
#   -h, --help          help for apply
#       --partitioned   Whether given DML should be executed as a Partitioned-DML or not
#
# Global Flags:
#       --credentials_file string   Specify Credentials File
#       --database string           Cloud Spanner database name (optional. if not set, will use $SPANNER_DATABASE_ID value)
#       --directory string          Directory that schema file placed (required)
#       --instance string           Cloud Spanner instance name (optional. if not set, will use $SPANNER_INSTANCE_ID value) (default "merpay-deferred-pay-jp-dev")
#       --project string            GCP project id (optional. if not set, will use $SPANNER_PROJECT_ID or $GOOGLE_CLOUD_PROJECT value)
#       --schema_file string        Name of schema file (optional. if not set, will use default 'schema.sql' file name)
#
# -----------------------------------------------------------------------------
#
# Migrate database
#
# Usage:
#   wrench migrate [command]
#
# Available Commands:
#   create      Create a set of sequential up migrations in directory
#   up          Apply all or N up migrations
#   version     Print current migration version
#   set         Set version V but don't run migration (ignores dirty state)
#
# Flags:
#   -h, --help   help for migrate
#
# Global Flags:
#       --credentials_file string   Specify Credentials File
#       --database string           Cloud Spanner database name (optional. if not set, will use $SPANNER_DATABASE_ID value)
#       --directory string          Directory that schema file placed (required)
#       --instance string           Cloud Spanner instance name (optional. if not set, will use $SPANNER_INSTANCE_ID value) (default "merpay-deferred-pay-jp-dev")
#       --project string            GCP project id (optional. if not set, will use $SPANNER_PROJECT_ID or $GOOGLE_CLOUD_PROJECT value)
#       --schema_file string        Name of schema file (optional. if not set, will use default 'schema.sql' file name)
#
# Use "wrench migrate [command] --help" for more information about a command.
#
# -----------------------------------------------------------------------------
#
# Create a set of sequential up migrations in directory
#
# Usage:
#   wrench migrate create NAME [flags]
#
# Flags:
#   -h, --help   help for create
#
# Global Flags:
#       --credentials_file string   Specify Credentials File
#       --database string           Cloud Spanner database name (optional. if not set, will use $SPANNER_DATABASE_ID value)
#       --directory string          Directory that migration files placed (required)
#       --instance string           Cloud Spanner instance name (optional. if not set, will use $SPANNER_INSTANCE_ID value) (default "merpay-deferred-pay-jp-dev")
#       --project string            GCP project id (optional. if not set, will use $SPANNER_PROJECT_ID or $GOOGLE_CLOUD_PROJECT value)
#       --schema_file string        Name of schema file (optional. if not set, will use default 'schema.sql' file name)#
#
# -----------------------------------------------------------------------------
#
# Apply all or N up migrations
#
# Usage:
#   wrench migrate up [N] [flags]
#
# Flags:
#   -h, --help   help for up
#
# Global Flags:
#       --credentials_file string   Specify Credentials File
#       --database string           Cloud Spanner database name (optional. if not set, will use $SPANNER_DATABASE_ID value)
#       --directory string          Directory that migration files placed (required)
#       --instance string           Cloud Spanner instance name (optional. if not set, will use $SPANNER_INSTANCE_ID value) (default "merpay-deferred-pay-jp-dev")
#       --project string            GCP project id (optional. if not set, will use $SPANNER_PROJECT_ID or $GOOGLE_CLOUD_PROJECT value)
#       --schema_file string        Name of schema file (optional. if not set, will use default 'schema.sql' file name)
#
# -----------------------------------------------------------------------------
#
# Print current migration version
#
# Usage:
#   wrench migrate version [flags]
#
# Flags:
#   -h, --help   help for version
#
# Global Flags:
#       --credentials_file string   Specify Credentials File
#       --database string           Cloud Spanner database name (optional. if not set, will use $SPANNER_DATABASE_ID value)
#       --directory string          Directory that migration files placed (required)
#       --instance string           Cloud Spanner instance name (optional. if not set, will use $SPANNER_INSTANCE_ID value) (default "merpay-deferred-pay-jp-dev")
#       --project string            GCP project id (optional. if not set, will use $SPANNER_PROJECT_ID or $GOOGLE_CLOUD_PROJECT value)
#       --schema_file string        Name of schema file (optional. if not set, will use default 'schema.sql' file name)#
#
# -----------------------------------------------------------------------------
#
# Set version V but don't run migration (ignores dirty state)
#
# Usage:
#   wrench migrate set V [flags]
#
# Flags:
#   -h, --help   help for set
#
# Global Flags:
#       --credentials_file string   Specify Credentials File
#       --database string           Cloud Spanner database name (optional. if not set, will use $SPANNER_DATABASE_ID value)
#       --directory string          Directory that migration files placed (required)
#       --instance string           Cloud Spanner instance name (optional. if not set, will use $SPANNER_INSTANCE_ID value) (default "merpay-deferred-pay-jp-dev")
#       --project string            GCP project id (optional. if not set, will use $SPANNER_PROJECT_ID or $GOOGLE_CLOUD_PROJECT value)
#       --schema_file string        Name of schema file (optional. if not set, will use default 'schema.sql' file name)#
#
# -----------------------------------------------------------------------------
#
# Help provides help for any command in the application.
# Simply type wrench help [path to command] for full details.
#
# Usage:
#   wrench help [command] [flags]
#
# Flags:
#   -h, --help   help for help
#
# Global Flags:
#       --credentials_file string   Specify Credentials File
#       --database string           Cloud Spanner database name (optional. if not set, will use $SPANNER_DATABASE_ID value)
#       --directory string          Directory that schema file placed (required)
#       --instance string           Cloud Spanner instance name (optional. if not set, will use $SPANNER_INSTANCE_ID value) (default "merpay-deferred-pay-jp-dev")
#       --project string            GCP project id (optional. if not set, will use $SPANNER_PROJECT_ID or $GOOGLE_CLOUD_PROJECT value)
#       --schema_file string        Name of schema file (optional. if not set, will use default 'schema.sql' file name)
#
# -----------------------------------------------------------------------------

function _wrench() {
  local context curcontext=$curcontext state line expl ret=1
  declare -A opt_args

  local -a commands
  commands=(
    'create:Create database with tables described in schema file'
    'drop:Drop database'
    'reset:Equivalent to drop and then create'
    'load:Load schema from server to file'
    'apply:Apply DDL file to database'
    'migrate:Migrate database'
    'truncate:Truncate all tables without deleting a database'
    'help:Help about any command'
  )

  local -a _gloabal_flags
  _gloabal_flags=(
    '--credentials_file[Specify Credentials File]:credentials file:_files'
    '--database[Cloud Spanner database name \(optional. if not set, will use $SPANNER_DATABASE_ID value\)]:Spanner database name'
    '--directory[Directory that schema file placed \(required\)]:schema file directory:_files'
    '--instance[Cloud Spanner instance name \(optional. if not set, will use $SPANNER_INSTANCE_ID value\)]:Spanner instance name'
    '--project[GCP project id \(optional. if not set, will use $SPANNER_PROJECT_ID or $GOOGLE_CLOUD_PROJECT value\)]:GCP project ID'
    "--schema_file[Name of schema file \(optional. if not set, will use default 'schema.sql' file name\)]:schema file:_flies"
  )

  _arguments -C \
    "1: :{_describe 'wrench commands' commands}" \
    '*:: :->args' \
    && ret=0

  case $words[1] in
    (create|drop|reset|load|truncate)
      _arguments \
        {-h,--help}'[show help]' \
        $_gloabal_flags
      ;;

    apply)
      _arguments \
        '--ddl[DDL file to be applied]:DDL file:_files' \
        '--dml[DML file to be applied]:DML file:_files' \
        {-h,--help}'[show help]' \
        '--partitioned[Whether given DML should be executed as a Partitioned-DML or not]' \
        $_gloabal_flags
      ;;

    migrate)
      local -a migrate_commands
      migrate_commands=(
        'create:Create a set of sequential up migrations in directory'
        'up:Apply all or N up migrations' 
        'version:Print current migration version'
        "set:Set version V but don't run migration \(ignores dirty state\)"
      )

      _arguments \
        "1: :{_describe 'migrate sub commands' migrate_commands}" \
        {-h,--help}'[show help]' \
        $_gloabal_flags \
        '*:: :->args'
      
      case $words[1] in
        create)
          _arguments \
            {-h,--help}'[show help]' \
            $_gloabal_flags \
            "*:migrate name"
          ;;

        up)
          _arguments \
            {-h,--help}'[show help]' \
            $_gloabal_flags \
            "*:number of up"
          ;;

        version)
          _arguments \
            {-h,--help}'[show help]' \
            $_gloabal_flags
          ;;

        set)
          _arguments \
            {-h,--help}'[show help]' \
            $_gloabal_flags \
            '*:migrate version'
          ;;
      esac
      ;;

    help)
      _arguments "1: :{_describe 'command' commands}"
      ;;
  esac

  return ret
}

_wrench "$*"

# vim:ft=zsh:et:sts=2:sw=2
