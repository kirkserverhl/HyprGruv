#compdef starlark

# -----------------------------------------------------------------------------
# The BSD-3-Clause License
#
# Copyright (c) 2018, Koichi Shiraishi
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of que nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------
#
# go.starlark.net/cmd/starlark
#
# -----------------------------------------------------------------------------
#
# Usage of starlark:
#   -c prog
#     	execute program prog
#   -cpuprofile string
#     	gather Go CPU profile in this file
#   -disassemble
#     	show disassembly during compilation of each function
#   -float
#     	allow floating-point numbers
#   -globalreassign
#     	allow reassignment of globals, and if/for/while statements at top level
#   -lambda
#     	allow lambda expressions
#   -memprofile string
#     	gather Go memory profile in this file
#   -nesteddef
#     	allow nested def statements
#   -profile string
#     	gather Starlark time profile in this file
#   -recursion
#     	allow while statements and recursive functions
#   -set
#     	allow set data type
#   -showenv
#     	on success, print final global environment
#
# -----------------------------------------------------------------------------

function _starlark() {
  local context curcontext=$curcontext state line expl ret=1
  declare -A opt_args

  function _star_files() {
    _alternative '*:star file:_path_files -g "**/*.star(-.)"'
  }

  _arguments -C \
    '-c[execute program prog]:prog:_files' \
    '-cpuprofile[gather Go CPU profile in this file]:output:_files' \
    '-disassemble[show disassembly during compilation of each function]' \
    '-float[allow floating-point numbers]' \
    '-globalreassign[allow reassignment of globals, and if/for/while statements at top level]' \
    '-lambda[allow lambda expressions]' \
    '-memprofile[gather Go memory profile in this file]:output:_files' \
    '-nesteddef[allow nested def statements]' \
    '-profile[gather Starlark time profile in this file]:output:_files' \
    '-recursion[allow while statements and recursive functions]' \
    '-set[allow set data type]' \
    '-showenv[on success, print final global environment]' \
    '1:star file:_star_files' \
    && ret=0

  return ret
}

_starlark "$*"

# vim:ft=zsh:et:sts=2:sw=2
