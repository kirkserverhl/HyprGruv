

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

# synopsis {{{
# Battery segment that displays percent charge,
# reacts to charging/discharging/charged,
# and has other options.
# }}}

# awaiting https://github.com/zdharma/zshelldoc/issues/8
# update: works now
# env-vars {{{
typeset -gA zincs_battery
zincs_battery[percent]=""
# zincs_battery[verbose] -> 0/1: enables showing time until full/empty (requiress acpi)
zincs_battery[verbose]="${zincs_battery[verbose]:-1}"
# }}}

# ZINC Battery segment
function zincs_battery () {
  (( ${zincs_battery[verbose]} )) && {
    if [[ -n ${zincs_battery[time_remaining]} ]]; then
      REPLY="${zincs_battery[percent]}%% (${zincs_battery[time_remaining]})"
    else
      # continue to else case below
      false
    fi
  } || {
    REPLY="${zincs_battery[percent]}%%"
  }
}

zincs_battery "$@"

# AUTOGENERATED - DO NOT EDIT

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

function zincs_battery_default_opts () {
  reply=(CONDITIONAL CONDITIONAL CONDITIONAL async)
}

# AUTOGENERATED - DO NOT EDIT

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

function zincs_battery_display_hidden () {
  if [[ ${zincs_battery[state]} == "charged" ]]; then
    return 0
  elif [[ ${zincs_battery[state]} == "disconnected" ]]; then
    return 1
  elif (( zincs_battery[percent] >= zincs_battery[threshold_hidden] )); then
    true
  elif [[ ${zincs_battery[state]} == "unknown" ]] || [[ ${zincs_battery[state]} == "" ]]; then
    # battery not supported on this system?
    # _ZINC_DBG_OUT "Not showing battery segment: unknown status."
    true
  else
    false
  fi
}

[[ "${(t)zincs_battery}" != "association" ]] && {
  typeset -gA zincs_battery
}
# env-vars {{{
# zincs_battery[threshold_hidden] -> hide the segment when above this percentage
zincs_battery[threshold_hidden]=${zincs_battery[threshold_hidden]:-"99"}
# }}}

zincs_battery_display_hidden "$@"

# AUTOGENERATED - DO NOT EDIT

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

function zincs_battery_bg () {
  # change color based on charge level
  if (( zincs_battery[percent] <= zincs_battery[threshold_low] )); then
    REPLY="${zincs_battery[bgcolor_low]}"
  elif (( zincs_battery[percent] >= zincs_battery[threshold_charged] )); then
    REPLY="${zincs_battery[bgcolor_charged]}"
  else
    REPLY="${zincs_battery[bgcolor_default]}"
  fi
}

[[ "${(t)zincs_battery}" != "association" ]] && {
  typeset -gA zincs_battery
}

# env-vars {{{
# zincs_battery[threshold_low] -> percentage
zincs_battery[threshold_low]=${zincs_battery[threshold_low]:-"30"}
# zincs_battery[threshold_charged] -> percentage
zincs_battery[threshold_charged]=${zincs_battery[threshold_charged]:-"95"}
# zincs_battery[bgcolor_default] -> bgcolor when not low or charged
zincs_battery[bgcolor_default]="${zincs_battery[bgcolor_default]:-black}"
# zincs_battery[bgcolor_low] -> color when below threshold_low
zincs_battery[bgcolor_low]="${zincs_battery[bgcolor_low]:-red}"
# zincs_battery[bgcolor_charged] -> color when above threshold_charged
zincs_battery[bgcolor_charged]="${zincs_battery[bgcolor_charged]:-${zincs_battery[bgcolor_default]}}"
# }}}

zincs_battery_bg "$@"

# AUTOGENERATED - DO NOT EDIT

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

# env-vars {{{
[[ "${(t)zincs_battery}" != "association" ]] && {
  typeset -gA zincs_battery
}
zincs_battery[threshold_low]=${zincs_battery[threshold_low]:-"30"}
# zincs_battery[fgcolor_low] -> color of text when battery below threshold_low
zincs_battery[fgcolor_low]="${zincs_battery[fgcolor_low]:-black}"
# zincs_battery[fgcolor_charging] -> color of text when charging
zincs_battery[fgcolor_charging]="${zincs_battery[fgcolor_charging]:-green}"
# zincs_battery[fgcolor_default] -> default foreground color
zincs_battery[fgcolor_default]="${zincs_battery[fgcolor_default]:-white}"
# }}}

# Change fg color based on low, charging, or default.
function zincs_battery_fg () {
  # change color based on charge level
  if (( zincs_battery[percent] <= zincs_battery[threshold_low] )); then
    REPLY="${zincs_battery[fgcolor_low]}"
  # elif (( zincs_battery[percent] >= zincs_battery[threshold_hidden] )); then
  #   REPLY="${zincs_battery[fgcolor_charged]}"
  elif [[ ${zincs_battery[state]} == "charging" ]]; then
    REPLY="${zincs_battery[fgcolor_charging]}"
  else
    REPLY="${zincs_battery[fgcolor_default]}"
  fi
}

zincs_battery_fg "$@"

# AUTOGENERATED - DO NOT EDIT

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

if [[ "$(uname -s )" == "Linux" ]]; then
  function zincs_battery_async () {
    # The battery can have four different states - default to 'unknown'.
    local current_state='unknown'
    local sysp="${ROOT_PREFIX}/sys/class/power_supply"
    local potential_bats=( "$sysp/*" )
    [[ ${#${(M)potential_bats:#*(BAT|battery)*}} ]] \n      && local bats=(${$(ls -d $sysp/(battery|BAT*))}) \n      || return

    local numerator="0"
    local denominator="0"
    local battery_status_full=true
    local battery_status_charging=false
    for bat in $bats; do
      numerator+="+ $(cat $bat/capacity) * $(cat $bat/(energy|charge)_full)"
      denominator+="+ $(cat $bat/(energy|charge)_full)"
      [[ $(cat $bat/status) != Full ]] && battery_status_full=false
      [[ $(cat $bat/status) == Charging ]] && battery_status_charging=true
    done

    local capacity=$(( ($numerator)/($denominator) ))
    [[ $capacity -gt 100 ]] \n      && local bat_percent=100 \n      || local bat_percent=$capacity
    [[ $battery_status_full == true || $battery_status_charging == true ]] \n      && local connected=true

    if [[ -z $connected ]]; then
      [[ $bat_percent -lt $P9K_BATTERY_LOW_THRESHOLD ]] \n        && current_state="low" \n        || current_state="disconnected"
    else
      [[ $bat_percent =~ 100 ]] && current_state="charged"
      [[ $bat_percent -lt 100 ]] && current_state="charging"
    fi
    if [[ -f ${ROOT_PREFIX}/usr/bin/acpi ]]; then
      declare -a acpi_lines
      acpi_lines=( "${(@f)$(${ROOT_PREFIX}/usr/bin/acpi)}" )
      local time_remaining=${${=${(M)acpi_lines:#*([[:digit:]][[:digit:]]:|rate)*}}[5]}
      unset acpi_lines

      if [[ $time_remaining =~ "rate" ]]; then
        local tstring="..."
      elif [[ $time_remaining =~ "[[:digit:]]+" ]]; then
        local tstring=${(f)$(date -u -d "$(echo $time_remaining)" +%k:%M 2> /dev/null)}
      fi
    fi
    # [[ -n $tstring ]] && local remain=" ($tstring)"

    [[ -z "${bat_percent}" ]] && return
    builtin print "${current_state};${bat_percent};${tstring}"
  }
else
  function zincs_battery_async () {
    # no support for OS
  }
fi

zincs_battery_async "$@"

# AUTOGENERATED - DO NOT EDIT

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

function zincs_battery_async_return () {
  # _ZINC_DBG_OUT "bat returned with ${2}"
  zincs_battery[asyncdata]="${2}"
  local -a returndata
  returndata=(${(s.;.)2})
  zincs_battery[state]="${returndata[1]}"
  zincs_battery[percent]="${returndata[2]}"
  zincs_battery[time_remaining]="${returndata[3]}"
}

zincs_battery_async_return "$@"

# AUTOGENERATED - DO NOT EDIT

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

function zincs_battery_async_started () {
  # zincs_battery[percent]="??"
  zincs_battery[state]=""
  zincs_battery[time_remaining]="..."
}

[[ "${(t)zincs_battery}" != "association" ]] && {
  typeset -gA zincs_battery
}

function _zincs_battery_async_complete () {
  _zinc_segment_async_reset_status zincs_battery
}

-zinc-add-hook _zinc_async_complete _zincs_battery_async_complete

zincs_battery_async_started "$@"

# AUTOGENERATED - DO NOT EDIT
