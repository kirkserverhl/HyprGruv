# vim: ft=zsh ts=2 sw=2 et fenc=utf-8
#
# ZINC
#
# A powerline ZSH theme, inspired by Powerlevel9k and friends.

autoload -Uz async && async

_ZINC_DBG_OUT () {;}

typeset -gHA _ZINC_ASYNC_STATII
typeset -gHi _ZINC_SHOULD_RESTART
_ZINC_SHOULD_RESTART=0

function _zinc_segment_async_callback () {
  # Async args:
  # $1 job name, e.g. the function passed to async_job
  # $2 return code
  # $3 resulting (stdout) output from job execution
  # $4 execution time, floating point e.g. 0.0076138973 seconds
  # $5 resulting (stderr) error output from job execution
  # $6 has next result in buffer (0 = buffer empty, 1 = yes)

  _ZINC_DBG_OUT "_zinc_segment_async_callback \"$1\" RET:$2"

  #if [[ "${1}" == "[async/eval]" ]] || \
  #   [[ "${1}" == ";" ]] || \
  #   [[ "${1}" == "[async]" ]];

  # if the worker died / errored
  if [[ "${1}" == "[async]" ]]; then
    if (( $2 == 2 || $2 == 3 || $2 == 130 )); then
      _ZINC_DBG_OUT "restarting dead worker: \"$1\" RET:$2 stderr:$5"
      zinc_restart_silent_background
      return
    else
      _ZINC_DBG_OUT "unhandled [async] callback: \"$1\" RET:$2 stderr:$5"
    fi
  fi

  # ignore the async evals used to alter worker environment
  if [[ "${1[1]}" != [A-Za-z0-9_] ]];
  then
    # _ZINC_DBG_OUT "async eval: ${(j. !! .)@}"
    return
  fi

  # if [[ "${1}" == "-zinc-tracked-autoload" ]] || \
  #    [[ "${1}" == "autoload" ]];
  # then
  #   shift 2
  # fi

  (( ${+functions[${1}_return]} )) || {
    -zinc-tracked-autoload "${1}_return"
    _ZINC_AUTOLOADED_FUNCTIONS+=("${1}_return")
  }
  # [[ "${(t)_ZINC_ASYNC_STATII}" == "association" ]] || typeset -A _ZINC_ASYNC_STATII
  # _ZINC_DBG_OUT "_zinc_segment_async_callback!!! ${(j.\n.)@}"
  _ZINC_ASYNC_STATII[${1}]="returned"
  "${1}_return" "$2" "$3" "$4" "$5"
  _ZINC_DBG_OUT "_ZINC_ASYNC_STATII now: ${(kv)_ZINC_ASYNC_STATII}"

  # TODO investigate reliability of $6
  # [[ "$6" == "0" ]] && prompt_zinc_render_to_vars && zle .reset-prompt
  prompt_zinc_render_to_vars && zle .reset-prompt

  _ZINC_ASYNC_STATII[${1}]="finished"

  # check to see if there any more async segments yet to return
  local -i async_complete=1 # default done
  for async_segment in ${(k)_ZINC_ASYNC_STATII}; do
    [[ ${_ZINC_ASYNC_STATII[${async_segment}]} != "finished" ]] && {
      async_complete=0
      break
    }
  done

  # let segments know we won't be drawing them again until the next precmd
  # useful for when segments only offered info on the previous command status
  (( async_complete )) && {
    _ZINC_DBG_OUT "running async_complete hook"
    -zinc-run-hook _zinc_async_complete
    if [[ "${_ZINC_SHOULD_RESTART}" == "1" ]]; then
      _ZINC_SHOULD_RESTART=0
      zinc_restart_silent_background
    fi
  }
}

# This is to allow segments to re-run async tasks by preference.
function _zinc_segment_async_reset_status () {
  [[ -z "$1" ]] && return
  # _ZINC_DBG_OUT "resetting async status of $1"
  _ZINC_ASYNC_STATII[${1}_async]=""
}

# Function that reloads all functions that were autoloaded by ZINC.
# This needs to be here to ensure we don't get into an autoload infinite loop.
typeset -gaU _ZINC_AUTOLOADED_FUNCTIONS
function zinc_reload () {
  async_flush_jobs zinc_segment_worker
  for autoloaded_function in $_ZINC_AUTOLOADED_FUNCTIONS; do
    unfunction -- $autoloaded_function
    [[ "$1" != "-q" ]] && echo "Reloading ${autoloaded_function}"
    -zinc-tracked-autoload "${autoloaded_function}"
  done
  # Self re-init:
  builtin unfunction prompt_zinc_setup
  # Don't call self! Let the user `prompt zinc` if needed.
  builtin autoload -Uz +X prompt_zinc_setup
}

# restarts just the worker - in order to update worker with current shell values
function zinc_worker_restart () {
  # _ZINC_DBG_OUT "restarting worker..."
  # async_worker_eval zinc_segment_worker "zinc_reload"
  async_stop_worker zinc_segment_worker
  async_start_worker zinc_segment_worker
  async_register_callback zinc_segment_worker _zinc_segment_async_callback
}

function zinc_restart () {
  zinc_worker_restart
  zinc_reload
  # prompt_zinc_chpwd
  # prompt_zinc_precmd
}

function zinc_restart_silent_background () {
  zinc_worker_restart
  zinc_reload -q
  prompt_zinc_precmd
}

# wait until it's convenient for us to restart the worker
function zinc_optional_depenency_loaded () {
  # _ZINC_DBG_OUT "queued restart..."
  _ZINC_SHOULD_RESTART=1
  # prompt_zinc_precmd
}

prompt_zinc_setup () {
  prompt_opts=( cr percent sp subst )
  setopt noprompt{cr,percent,sp,subst} "prompt${^prompt_opts[@]}"

  builtin autoload -Uz +X -- -zinc-tracked-autoload add-zsh-hook
  -zinc-tracked-autoload zinc_render_prompt_from_spec prompt_zinc_render_to_vars
  -zinc-tracked-autoload -zinc-define-hook -zinc-add-hook -zinc-run-hook

  # association
  typeset -gA zinc_opts _ZINC_SEGMENT_DEFAULTS _ZINC_ASYNC_STATII
  # array
  typeset -ga zinc_left zinc_right

  if [[ "$1" == "dev" ]] || [[ ! -z "${ZINC_DEV}" ]]; then
    [[ "$1" == "dev" ]] && shift
    fpath+=("${_ZINC_0[repo]}/51")

    # enable debugging logging
    _ZINC_DBG_OUT () {
      # ' >/tmp/_ZINC_DBG_OUT.log 2>&1'
      echo -e "$@" >> ~/._ZINC_DBG_OUT.log
    }
  fi

  # load a preset by name
  if [[ "$1" != "" ]]; then
    if [[ -r "${_ZINC_0[repo]}/presets/${1}.zincp.zsh" ]]; then
      _ZINC_DBG_OUT "loading preset $1"
      source "${_ZINC_0[repo]}/presets/${1}.zincp.zsh"
    else
      echo "ZINC: No such preset found in ${_ZINC_0[repo]}/presets/."
    fi
  fi

  # defaults:
  [[ "${#zinc_left}" == "0" ]] && {
    zinc_left=(zincs_userhost zincs_cwd zincs_vcs)
    zinc_right=(zincs_retval zincs_execution_time zincs_time)
  }

  # Setup precmd / preexec / chpwd
  # _ZINC_ASYNC_STATII["test"]="confirm"
  -zinc-tracked-autoload prompt_zinc_precmd
  add-zsh-hook precmd prompt_zinc_precmd
  -zinc-tracked-autoload prompt_zinc_preexec
  add-zsh-hook preexec prompt_zinc_preexec
  -zinc-tracked-autoload prompt_zinc_chpwd
  add-zsh-hook chpwd prompt_zinc_chpwd

  -zinc-define-hook _zinc_async_complete

  PROMPT="%f%b%k\${_ZINC_RENDERED_OUTPUT_PROMPT}"
  RPROMPT="%f%b%k\${_ZINC_RENDERED_OUTPUT_RPROMPT}%f%b%k"

  async_start_worker zinc_segment_worker #-n
  async_register_callback zinc_segment_worker _zinc_segment_async_callback

  async_worker_eval zinc_segment_worker "autoload" "-Uz" "+X" "-zinc-tracked-autoload"

  # gives segments a setup run before the first precmd
  prompt_zinc_preexec

  for segment in ${zinc_left} ${zinc_right}; do
    -zinc-tracked-autoload ${segment}
  done

}

prompt_zinc_preview () {
  local -a presets preset
  presets=()
  presets+=("" robobenklein)
  presets+=("idestykk")

  if (( ! $#* )); then
    for (( i = 1; i <= $#presets; i++ )); do
      preset=(${presets[$i]})
      prompt_preview_theme zinc "${preset}"
      (( i < $#presets )) && print
    done
  else
    prompt_preview_theme zinc "$@"
  fi
}

function prompt_zinc_redraw_soft () {
  for async_segment in ${(k)_ZINC_ASYNC_STATII};do
    [[ "${_ZINC_ASYNC_STATII[$async_segment]}" == "finished" ]] && {
      _ZINC_ASYNC_STATII[$async_segment]=""
    }
  done
  prompt_zinc_render_to_vars
  zle .reset-prompt
}
zle -N prompt_zinc_redraw_soft

function prompt_zinc_compile () {
  emulate -L zsh
  setopt extendedglob
  unsetopt autopushd
  local curdir="$PWD"
  cd ${_ZINC_0[repo]}/zinc_functions
  for f in ./*; do
    [[ $f != *.zwc ]] && {
      echo "compiling $f ..."
      zcompile $f
    }
  done
  cd ../segments
  for f in ./*; do
    [[ $f != *.zwc ]] && {
      echo "compiling $f ..."
      zcompile $f
    }
  done
  cd $curdir
}

function prompt_zinc_minmode () {
  _ZINC_SEP_CHARS[left]=''
  _ZINC_SEP_CHARS[right]=''
  _ZINC_SEP_CHARS[left_bgmatch]=''
  _ZINC_SEP_CHARS[right_bgmatch]=''
}

typeset -gHA _ZINC_0
_ZINC_0[srcfile]="${_ZINC_SCRIPTPATH:-${ZERO:-${(%):-%N}}}"
_ZINC_0[repo]="${_ZINC_0[srcfile]:h}"

prompt_zinc_setup "$@"
