# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

typeset -gA _ZINC_SEP_CHARS

_ZINC_SEP_CHARS[left]=${_ZINC_SEP_CHARS[left]-''}
_ZINC_SEP_CHARS[right]=${_ZINC_SEP_CHARS[right]-''}
_ZINC_SEP_CHARS[left_bgmatch]=${_ZINC_SEP_CHARS[left_bgmatch]-''}
_ZINC_SEP_CHARS[right_bgmatch]=${_ZINC_SEP_CHARS[right_bgmatch]-''}
if (( ! ${+_ZINC_SEP_CHARS[rprompt_terminating_space]} )); then
  autoload -Uz is-at-least
  if is-at-least 5.0.5 && [[ ! -v ZLE_RPROMPT_INDENT ]]; then
    ZLE_RPROMPT_INDENT=0
    _ZINC_SEP_CHARS[rprompt_terminating_space]=" %{%k%f%}"
  else
    # if in tmux/etc don't use the hidden end space trick
    # causes alignment issues with the left prompt -> command
    if [[ ! -z "${TMUX}${SCREEN_NO}" ]] || \
      [[ ! -z "${ITERM_SESSION_ID}" ]] || \
      (( ZLE_RPROMPT_INDENT <= 0 )); then
      _ZINC_SEP_CHARS[rprompt_terminating_space]=" %{%k%f%}"
    else
      _ZINC_SEP_CHARS[rprompt_terminating_space]="%{ %k%f%}"
    fi
  fi
fi

function _zinc_str_has_substr () {
  # $1: a string to look for the flag in
  # $2: the flag to look for
  # return: true/false return value

  # _ZINC_DBG_OUT "is $2 in \"$1\" ?"
  if [[ "$1" =~ .*${2}.* ]]; then
    # _ZINC_DBG_OUT yes
    true
  else
    # _ZINC_DBG_OUT no
    false
  fi
}

function zinc_render_prompt_from_spec () {
  _ZINC_DBG_OUT "\n>>> build_prompt: $1 $2"
  # Builds the prompt with the given name.
  #
  # $1: Name of a zinc prompt segment array. Required.
  # $2: Name of a zinc segment options array.
  # $3: Render direction
  # $4: Chars to use as segment separator.

  [[ "${(P)#1}" == "0" ]] && _ZINC_DBG_OUT 'ERR: no segments' && return
  _ZINC_DBG_OUT "${(P)#1} segments to render"

  local _ZINC_SBUF=""

  # HACK
  # _ZINC_DBG_OUT "_ZINC_ASYNC_STATII: ${(kv)_ZINC_ASYNC_STATII}"

  [[ ${3} != "right" ]] && 3="left"

  local -a prev_segment_opts
  [[ $3 != "right" ]] && prev_segment_opts[3]="NOCONNECT"
  local -A _zinc_opts
  _zinc_opts=(${(kvP)${2}})
  local -a segment_opts
  local segment_optstr

  for cur_segment in ${(P)${1}}; do

    # Autoload function
    -zinc-tracked-autoload $cur_segment

    # Get segment options, fill needed defaults
    segment_optstr="${_zinc_opts[$cur_segment]}"
    _ZINC_DBG_OUT "$cur_segment segment_optstr: ${segment_optstr}"
    segment_opts=("${(@s.;.)segment_optstr}")
    # _ZINC_DBG_OUT "$cur_segment opts before default application: type(${(t)segment_opts}) ${segment_opts}"
    local segment_opts_default_filled=0
    for segment_opt_number in {1..4}; do
      [[ "${segment_opts[$segment_opt_number]}" == "" ]] && {
        # then we need to get the default opt here
        [[ "${_ZINC_SEGMENT_DEFAULTS[${cur_segment}_${segment_opt_number}]}" == "" ]] && {
          # _ZINC_DBG_OUT "getting default opts for $cur_segment ${segment_opt_number}"
          -zinc-tracked-autoload "${cur_segment}_default_opts"
          local -a reply
          reply=(NONE NONE normal normal)
          ${cur_segment}_default_opts
          # _ZINC_DBG_OUT "$cur_segment default opts: ${(j.,.)reply}"
          for v in {1..4}; do
            _ZINC_SEGMENT_DEFAULTS[${cur_segment}_${v}]=${reply[${v}]}
          done
        }
        # set the value from _ZINC_SEGMENT_DEFAULTS cache
        segment_opts[${segment_opt_number}]="${_ZINC_SEGMENT_DEFAULTS[${cur_segment}_${segment_opt_number}]}"
        segment_opts_default_filled=1
      }
    done
    (( segment_opts_default_filled == 1 )) && {
      # _ZINC_DBG_OUT "filling options assoc ${2}[${cur_segment}] with new defaults"
      eval "${2}[${cur_segment}]=\${(j.;.)segment_opts}"
    }
    # _ZINC_DBG_OUT "opts for "$cur_segment':' "${(j.,.)segment_opts}"

    # Detect segments with asynchronous output enabled
    # async status "" means not yet started
    [[ "${segment_opts[4]}" == "async" ]] && \
    [[ "${_ZINC_ASYNC_STATII[${cur_segment}_async]}" == "" ]] && {
      # -zinc-tracked-autoload "${cur_segment}_async"
      # _ZINC_DBG_OUT "asyncing segment ${cur_segment}"
      async_worker_eval zinc_segment_worker "-zinc-tracked-autoload" "${cur_segment}_async"
      [[ "${(t)_ZINC_ASYNC_STATII}" == "association" ]] || typeset -gA _ZINC_ASYNC_STATII
      -zinc-tracked-autoload "${cur_segment}_async_started"
      ${cur_segment}_async_started "${(@)segment_opts}"
      _ZINC_ASYNC_STATII[${cur_segment}_async]="started"
      # _ZINC_DBG_OUT "async_job: ${cur_segment}_async !! ${(@)segment_opts}"
      # _ZINC_DBG_OUT "_ZINC_ASYNC_STATII now: ${(kv)_ZINC_ASYNC_STATII}"
      async_job zinc_segment_worker "${cur_segment}_async" "${(@)segment_opts}"
    }

    # Run the segment and gather output:
    REPLY=""
    ${cur_segment} "${(@)segment_opts}"
    local segment_output="$REPLY"

    # Detect segments with conditional display
    if _zinc_str_has_substr "${segment_opts[3]}" "CONDITIONAL"; then
      -zinc-tracked-autoload "${cur_segment}_display_hidden"
      ${cur_segment}_display_hidden && {
        _ZINC_DBG_OUT "not displaying ${cur_segment}"
        continue
      }
    fi

    # if ZINC should not render the content
    if _zinc_str_has_substr "${segment_opts[3]}" "ZINC_SEGMENT_NONRENDERABLE"; then
      _ZINC_SBUF+="${segment_output}"
      continue
    fi

    # Detect segments with conditional colors
    if [[ "${segment_opts[1]}" == "CONDITIONAL" ]]; then
      -zinc-tracked-autoload "${cur_segment}_fg"
      REPLY="white"
      ${cur_segment}_fg
      segment_opts[1]="${REPLY}"
    fi
    if [[ ${segment_opts[2]} == "CONDITIONAL" ]]; then
      -zinc-tracked-autoload "${cur_segment}_bg"
      REPLY="black"
      ${cur_segment}_bg
      segment_opts[2]="${REPLY}"
    fi

    _ZINC_DBG_OUT "prev_segment_opts: ${prev_segment_opts}, current: ${segment_opts}"

    # Detect segment connection

    if _zinc_str_has_substr "${prev_segment_opts[3]}" "NOCONNECT" || _zinc_str_has_substr "${segment_opts[3]}" "CONNECT_PREV"; then
      # skip drawing the arrow
      _ZINC_SBUF+="%{%K{${segment_opts[2]}}%} "
    elif [[ "${prev_segment_opts[2]}" == "${segment_opts[2]}" ]]; then
      # _ZINC_DBG_OUT "joining segments with same bg"
      [[ "$3" == "left" ]] && {
        _ZINC_SBUF+=" %{%K{${segment_opts[2]}}%F{${prev_segment_opts[2]}}%}${_ZINC_SEP_CHARS[${3}_bgmatch]} "
      } || {
        _ZINC_SBUF+=" %{%F{${segment_opts[1]}}%}${_ZINC_SEP_CHARS[${3}_bgmatch]}%{%K{${segment_opts[2]}}%} "
      }
    else
      [[ "$3" == "left" ]] && {
        _ZINC_SBUF+=" %{%K{${segment_opts[2]}}%F{${prev_segment_opts[2]}}%}${_ZINC_SEP_CHARS[${3}]} "
      } || {
        _ZINC_SBUF+=" %{%F{${segment_opts[2]}}%}${_ZINC_SEP_CHARS[${3}]}%{%K{${segment_opts[2]}}%} "
      }
    fi

    # print actual segment content
    _ZINC_SBUF+="%{%F{${segment_opts[1]}}%}"
    _ZINC_SBUF+="${segment_output}"

    # store for next loop
    prev_segment_opts=(${segment_opts})
  done

  # finish the prompt line:
  # the `%{ %}` is an invis wrapper
  if [[ "$3" == "left" ]]; then
    if ! _zinc_str_has_substr "${segment_opts[3]}" "ENDLINE"; then
      # if does not have flag ENDLINE
      _ZINC_SBUF+=' %{%k%F{'${prev_segment_opts[2]}'}%}'${_ZINC_SEP_CHARS[${3}]}'%f '
    fi
  else # right prompt
    if _zinc_str_has_substr "${segment_opts[3]}" "ZINC_SEGMENT_NONRENDERABLE"; then
      _ZINC_DBG_OUT "Not applying rprompt_terminating_space because last segment $cur_segment is NONRENDERABLE"
    else
      _ZINC_SBUF+="${_ZINC_SEP_CHARS[rprompt_terminating_space]}"
    fi
  fi

  REPLY="$_ZINC_SBUF"

  _ZINC_DBG_OUT "<<< render done."
}

_ZINC_AUTOLOADED_FUNCTIONS+=("zinc_render_prompt_from_spec")

zinc_render_prompt_from_spec "$@"
