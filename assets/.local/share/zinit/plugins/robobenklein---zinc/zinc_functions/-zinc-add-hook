# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

# Most code stolen from
# https://github.com/willghatch/zsh-hooks/blob/master/zsh-hooks.plugin.zsh

# Add to HOOK the given FUNCTION.
#
# With -d, remove the function from the hook instead; delete the hook
# variable if it is empty.
#
# -D behaves like -d, but pattern characters are active in the
# function name, so any matching function will be deleted from the hook.
#
# Without -d, the FUNCTION is marked for autoload; -U is passed down to
# autoload if that is given, as are -z and -k.  (This is harmless if the
# function is actually defined inline.)

function -zinc-add-hook () {

  emulate -L zsh

  local opt
  local -a autoopts
  integer del list help

  while getopts "dDhLUzk" opt; do
    case $opt in
      (d)
      del=1
      ;;

      (D)
      del=2
      ;;

      (h)
      help=1
      ;;

      (L)
      list=1
      ;;

      ([Uzk])
      autoopts+=(-$opt)
      ;;

      (*)
      return 1
      ;;
    esac
  done
  shift $(( OPTIND - 1 ))

  if (( list )); then
    if [[ -z "$1" ]]; then
      echo 'what hook do you want listed?' 2>&1
      return 1
    fi
    typeset -mp $@
    return $?
  elif (( help || $# != 2 )); then
    print -u$(( 2 - help )) $usage
    return $(( 1 - help ))
  fi

  local hook="${1}"
  local fn="$2"

  if (( del )); then
    # delete, if hook is set
    if (( ${(P)+hook} )); then
      if (( del == 2 )); then
        set -A $hook ${(P)hook:#${~fn}}
      else
        set -A $hook ${(P)hook:#$fn}
      fi
      # unset if no remaining entries --- this can give better
      # performance in some cases
      if (( ! ${(P)#hook} )); then
        unset $hook
      fi
    fi
  else
    if (( ${(P)+hook} )); then
      if (( ${${(P)hook}[(I)$fn]} == 0 )); then
        set -A $hook ${(P)hook} $fn
      fi
    else
      set -A $hook $fn
    fi
    autoload $autoopts -- $fn
  fi

}

-zinc-hooks-define-zle-hook(){
    local hname
    hname="${1//-/_}"  # substitute all `-` with `_`
    eval "
        -zinc-tracked-autoload -zinc-define-hook -zinc-run-hook
        -zinc-define-hook ${hname}_hook
        ${1}(){
            ZSH_CUR_KEYMAP=\$KEYMAP
            -zinc-run-hook ${hname}_hook
        }
        zle -N ${1}
        "
}

# https://gitlab.com/robobenklein/zinc/issues/10
# only should defined in segments that require the hook
# -zinc-hooks-define-zle-hook zle-keymap-select
# -zinc-hooks-define-zle-hook zle-line-init
# -zinc-hooks-define-zle-hook zle-line-finish
# -zinc-hooks-define-zle-hook zle-isearch-exit
# -zinc-hooks-define-zle-hook zle-isearch-update

# this one causes a double-free error for zaw using the ag source
# because it does some funny stuff with the history.  Anyway,
# since as far as I know nobody uses or wants to use this hook,
# I'll comment it out until such a time as this issue is fixed...
# -zinc-hooks-define-zle-hook zle-history-line-set

# load the official hooks as well
autoload -Uz add-zsh-hook

-zinc-add-hook "$@"
