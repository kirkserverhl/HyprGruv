#!/usr/bin/env python3

import os
import re
import uuid
from pathlib import Path

# Path to the sequences file
SEQUENCES_FILE = os.path.expanduser("~/.cache/wal/sequences")

# Output directory for Yazi theme
YAZI_THEME_NAME = "pywal"
YAZI_THEME_DIR = os.path.expanduser(f"~/.config/yazi/flavors/{YAZI_THEME_NAME}.yazi")
YAZI_FLAVOR_FILE = os.path.join(YAZI_THEME_DIR, "flavor.toml")
YAZI_TMTHEME_FILE = os.path.join(YAZI_THEME_DIR, "tmtheme.xml")

def extract_colors():
    """Extract color values from the pywal sequences file"""
    colors = {}
    
    with open(SEQUENCES_FILE, 'r') as f:
        content = f.read()
    
    # Find all color definitions in the format ]4;INDEX;#HEXCODE\
    color_pattern = r'\]4;(\d+);(#[0-9A-Fa-f]{6})\\'
    matches = re.findall(color_pattern, content)
    
    for match in matches:
        index, color = match
        colors[int(index)] = color
    
    return colors

def generate_flavor():
    """Generate a Yazi flavor.toml file using the extracted colors"""
    # Create theme directory if it doesn't exist
    Path(YAZI_THEME_DIR).mkdir(parents=True, exist_ok=True)
    
    # Extract colors
    colors = extract_colors()
    
    # Map colors to variables
    fg = colors.get(7, "#c3c3c3")  # Default to light gray if not found
    bg = colors.get(0, "#101212")  # Default to dark gray if not found
    black = colors.get(0, "#101212")
    red = colors.get(1, "#3F8288")
    green = colors.get(2, "#478789")
    yellow = colors.get(3, "#739C8F")
    blue = colors.get(4, "#83A598")
    magenta = colors.get(5, "#9FAB96")
    cyan = colors.get(6, "#CBD1A8")
    white = colors.get(7, "#c3c3c3")
    bright_black = colors.get(8, "#596d6d")
    
    # Create the flavor.toml file content
    flavor_content = f"""# vim:fileencoding=utf-8:foldmethod=marker
# Generated by pywal for Yazi

# : Manager {{{{

[manager]
cwd = {{ fg = "{fg}" }}

# Hovered
hovered = {{ reversed = true }}
preview_hovered = {{ underline = true }}

# Find
find_keyword = {{ fg = "{yellow}", bold = true, italic = true, underline = true }}
find_position = {{ fg = "{green}", bg = "reset", bold = true, italic = true }}

# Marker
marker_copied = {{ fg = "{green}", bg = "{green}" }}
marker_cut = {{ fg = "{red}", bg = "{red}" }}
marker_marked = {{ fg = "{fg}", bg = "{fg}" }}
marker_selected = {{ fg = "{yellow}", bg = "{yellow}" }}

# Tab
tab_active = {{ reversed = true }}
tab_inactive = {{}}
tab_width = 1

# Count
count_copied = {{ fg = "{bg}", bg = "{green}" }}
count_cut = {{ fg = "{bg}", bg = "{red}" }}
count_selected = {{ fg = "{bg}", bg = "{yellow}" }}

# Border
border_symbol = "â”‚"
border_style = {{ fg = "{bright_black}" }}

# : }}}}


# : Mode {{{{

[mode]

normal_main = {{ fg = "{bg}", bg = "{cyan}", bold = true }}
normal_alt = {{ fg = "{cyan}", bg = "{bright_black}" }}

# Select mode
select_main = {{ fg = "{bg}", bg = "{fg}", bold = true }}
select_alt = {{ fg = "{fg}", bg = "{bright_black}" }}

# Unset mode
unset_main = {{ fg = "{bg}", bg = "{green}", bold = true }}
unset_alt = {{ fg = "{green}", bg = "{bright_black}" }}

# : }}}}


# : Status bar {{{{

[status]
sep_left = {{ open = "", close = "" }}
sep_right = {{ open = "", close = "" }}

# Progress
progress_label = {{ fg = "{fg}", bold = true }}
progress_normal = {{ fg = "{cyan}", bg = "{bright_black}" }}
progress_error = {{ fg = "{red}", bg = "{bright_black}" }}

# Permissions
perm_sep = {{ fg = "{fg}" }}
perm_type = {{ fg = "{blue}" }}
perm_read = {{ fg = "{yellow}" }}
perm_write = {{ fg = "{red}" }}
perm_exec = {{ fg = "{green}" }}

# : }}}}


# : Pick {{{{

[pick]
border = {{ fg = "{cyan}" }}
active = {{ fg = "{green}", bold = true }}
inactive = {{}}

# : }}}}


# : Input {{{{

[input]
border = {{ fg = "{cyan}" }}
title = {{}}
value = {{}}
selected = {{ reversed = true }}

# : }}}}


# : Completion {{{{

[cmp]
border = {{ fg = "{cyan}" }}

# : }}}}


# : Tasks {{{{

[tasks]
border = {{ fg = "{cyan}" }}
title = {{}}
hovered = {{ fg = "{green}", underline = true }}

# : }}}}


# : Which {{{{

[which]
mask = {{ bg = "{bright_black}" }}
cand = {{ fg = "{fg}" }}
rest = {{ fg = "{white}" }}
desc = {{ fg = "{green}" }}
separator = "  "
separator_style = {{ fg = "{bright_black}" }}

# : }}}}


# : Help {{{{

[help]
on = {{ fg = "{fg}" }}
run = {{ fg = "{green}" }}
hovered = {{ reversed = true, bold = true }}
footer = {{ fg = "{bright_black}", bg = "{cyan}" }}

# : }}}}


# : Notify {{{{

[notify]
title_info = {{ fg = "{green}" }}
title_warn = {{ fg = "{yellow}" }}
title_error = {{ fg = "{red}" }}

# : }}}}


# : File-specific styles {{{{

[filetype]

rules = [
  # Images
  {{ mime = "image/*", fg = "{fg}" }},

  # Media
  {{ mime = "{{audio,video}}/*", fg = "{yellow}" }},

  # Archives
  {{ mime = "application/{{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}}", fg = "{green}" }},

  # Documents
  {{ mime = "application/{{pdf,doc,rtf}}", fg = "{green}" }},

  # Fallback
  {{ name = "*", fg = "{fg}" }},
  {{ name = "*/", fg = "{cyan}" }},
]

# : }}}}
"""
    
    # Write the flavor file
    with open(YAZI_FLAVOR_FILE, 'w') as f:
        f.write(flavor_content)
    
    print(f"Generated Yazi flavor file at: {YAZI_FLAVOR_FILE}")

def generate_tmtheme():
    """Generate a Yazi tmtheme.xml file"""
    # Create theme directory if it doesn't exist
    Path(YAZI_THEME_DIR).mkdir(parents=True, exist_ok=True)
    
    tmtheme_content = f"""<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>name</key>
    <string>Pywal - Generated</string>
    <key>semanticClass</key>
    <string>theme.dark.pywal</string>
    <key>uuid</key>
    <string>{uuid.uuid4()}</string>
    <key>colorSpaceName</key>
    <string>sRGB</string>
  </dict>
</plist>
"""
    
    # Write the tmtheme file
    with open(YAZI_TMTHEME_FILE, 'w') as f:
        f.write(tmtheme_content)
    
    print(f"Generated Yazi tmtheme.xml file at: {YAZI_TMTHEME_FILE}")

def main():
    generate_flavor()
    generate_tmtheme()
    print(f"Pywal theme for Yazi has been created at: {YAZI_THEME_DIR}")
    print(f"To use it, add 'theme.name = \"{YAZI_THEME_NAME}\"' to your Yazi config")

if __name__ == "__main__":
    main()
